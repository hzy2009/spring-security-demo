<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns="http://www.springframework.org/schema/security"
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security-3.2.xsd
       
       http://www.springframework.org/schema/security/oauth2
       http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd">
	
	<!-- demo4 -->
	<!-- 处理/oauth/token的网络请求 -->
	<http pattern="/oauth/token" create-session="stateless" 
	    authentication-manager-ref="oauth2AuthenticationManager"
        entry-point-ref="oauth2AuthenticationEntryPoint">
        
	    <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
	    <anonymous enabled="false" />
	    <http-basic entry-point-ref="oauth2AuthenticationEntryPoint" />
	    <custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER" />
	    <access-denied-handler ref="oauth2AccessDeniedHandler" />
    </http>
    
    <http pattern="/index.html" create-session="never"
		entry-point-ref="oauth2AuthenticationEntryPoint"
		access-decision-manager-ref="accessDecisionManager">
		<anonymous enabled="false" />
		<intercept-url pattern="/index**" access="ROLE_USER" />
		<custom-filter ref="mobileResourceServer" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauth2AccessDeniedHandler" />
	</http>
	<http pattern="/admin.html" create-session="never"
		entry-point-ref="oauth2AuthenticationEntryPoint"
		access-decision-manager-ref="accessDecisionManager">
		<anonymous enabled="false" />
		<intercept-url pattern="/admin**" access="ROLE_ADMIN,SCOPE_READ" />
		<custom-filter ref="mobileResourceServer" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauth2AccessDeniedHandler" />
	</http>
	
	<http auto-config="true">
		<custom-filter ref="customFilterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR"/>
	</http>
    
	<beans:bean id="customFilterSecurityInterceptor" 
	    class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor" autowire="byType">
	    <beans:property name="accessDecisionManager" ref="accessDecisionManager"></beans:property>
		<beans:property name="authenticationManager" ref="authenticationManager"></beans:property>
		<beans:property name="securityMetadataSource" ref="customFilterInvocationSecurityMetadataSource"></beans:property>
	</beans:bean>
	
	<beans:bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
	    <beans:constructor-arg name="decisionVoters">
	        <beans:list>
	        <beans:bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"></beans:bean>
	        <beans:bean class="org.springframework.security.access.vote.RoleVoter"></beans:bean>
	        </beans:list>
	    </beans:constructor-arg>
	</beans:bean>
	
	
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="customUserDetailsServiceImpl"></authentication-provider>
	</authentication-manager> 
	
	<beans:bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore"/>
    <beans:bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">  
        <beans:property name="tokenStore" ref="tokenStore"/>  
        <beans:property name="supportRefreshToken" value="true"/>
    </beans:bean>
    
    <beans:bean id="oauth2ClientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <beans:constructor-arg ref="clientDetailsService"/>
    </beans:bean>
    
    <authentication-manager id="oauth2AuthenticationManager">
        <authentication-provider user-service-ref="oauth2ClientDetailsUserService"/>
    </authentication-manager>
    
    <oauth2:client-details-service id="clientDetailsService">
        <oauth2:client 
            client-id="mobile_1"
            secret="secret_1"
            scope="read,write,trust"  
            authorized-grant-types="password,authorization_code,refresh_token,implicit"
            />
    </oauth2:client-details-service>
    
    <!-- 访问入口 -->
    <beans:bean id="oauth2AuthenticationEntryPoint"
        class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint"/>
    <!-- 拒绝访问处理 -->
    <beans:bean id="oauth2AccessDeniedHandler"
        class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler"/>
    <!-- 访问成功 -->
    <beans:bean id="oauthUserApprovalHandler" 
        class="org.springframework.security.oauth2.provider.approval.DefaultUserApprovalHandler"/>
    <!-- 访问控制 -->
    <!-- <beans:bean id="oauth2AccessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
        <beans:constructor-arg>
             <beans:list>
             <beans:bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"/>
             <beans:bean class="org.springframework.security.access.vote.RoleVoter"/>
             <beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
             </beans:list>
        </beans:constructor-arg>
    </beans:bean> -->
    
    <!-- oauth2的server所能支持的请求类型 -->
    <oauth2:authorization-server 
        client-details-service-ref="clientDetailsService" 
        token-services-ref="tokenServices"
        user-approval-handler-ref="oauthUserApprovalHandler" >  
        <oauth2:authorization-code />
        <oauth2:implicit />
        <oauth2:refresh-token />
        <oauth2:client-credentials />
        <oauth2:password authentication-manager-ref="oauth2AuthenticationManager"/>
    </oauth2:authorization-server>
    
    <oauth2:resource-server id="mobileResourceServer"
        resource-id="mobile-resource" token-services-ref="tokenServices" />
    
    <beans:bean id="clientCredentialsTokenEndpointFilter"
        class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <beans:property name="authenticationManager" ref="oauth2AuthenticationManager"/>
    </beans:bean>
        
</beans:beans>
